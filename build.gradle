def reguiredGradleVersionMajor = 2
def requiredGradleVersionMinor = 0
def (gradleVersionMajor, gradleVersionMinor) =
getGradle().gradleVersion.tokenize('.').collect { it.toInteger() }

if (gradleVersionMajor < reguiredGradleVersionMajor ||
        (gradleVersionMajor == reguiredGradleVersionMajor &&
                gradleVersionMinor < requiredGradleVersionMinor)) {
    throw new GradleException("Gradle version " +
            "$reguiredGradleVersionMajor.$requiredGradleVersionMinor and higher required.")
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    repositories {
        mavenCentral()
    }
}

task octopusTools(type: Exec) {
    workingDir './python/octopus-tools'
    commandLine 'python3', 'setup.py', 'install', '--user'
}

task bjoernTools(type: Exec, dependsOn: octopusTools) {
    workingDir './python/bjoern-tools'
    commandLine 'python3', 'setup.py', 'install', '--user'
}

task deploy(dependsOn: build) << {
    copy {
        into "projects/octopus/octopus-server/plugins"
        from fileTree("projects/bjoern-plugins").files
        include '**/*.jar'
        exclude '**/*-plain.jar'
        includeEmptyDirs = false
    }
}

build.dependsOn subprojects.build
build.dependsOn bjoernTools

configure(project(':projects:bjoern-plugins').subprojects) {
    task jarWithDep(type: Jar) {
        doFirst {
            def pluginJars = configurations.runtime.minus(project(':projects:octopus:octopus-server').configurations.runtime).asCollection()
            pluginJars.remove(new File(project(':projects:octopus:octopus-server').buildDir.toString() + '/libs/octopus-server.jar'))
            pluginJars.add(new File(project.buildDir.toString() + '/libs/' + project.name + '-plain.jar'))
            baseName = project.name
            from { pluginJars.collect { it.isDirectory() ? it : zipTree(it) } }
            with jar
        }
    }
    jar {
        baseName = project.name + '-plain'
    }

    jarWithDep.dependsOn(jar)
    assemble.dependsOn(jarWithDep)
}
